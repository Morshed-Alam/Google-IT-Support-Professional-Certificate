1
00:00:11,775 --> 00:00:15,384
Before we get our hands dirty with
learning how to build a computer,

2
00:00:15,384 --> 00:00:17,110
let's talk theory first.

3
00:00:17,110 --> 00:00:19,710
In an earlier lesson,
we talked about binary, and

4
00:00:19,710 --> 00:00:22,280
how computers perform calculations.

5
00:00:22,280 --> 00:00:26,200
Remember that our computer can only
communicate in binary, using ones and

6
00:00:26,200 --> 00:00:27,500
zeroes.

7
00:00:27,500 --> 00:00:32,460
Our computers speak in machine language,
but we of course speak in human languages,

8
00:00:32,460 --> 00:00:36,080
like English, Spanish, Mandarin, Hindi.

9
00:00:36,080 --> 00:00:37,230
You get the idea.

10
00:00:37,230 --> 00:00:40,040
If we want to communicate
with our machines,

11
00:00:40,040 --> 00:00:43,130
we have to have some
translation dictionary.

12
00:00:43,130 --> 00:00:46,230
Just if I wanted to say
something in Spanish,

13
00:00:46,230 --> 00:00:49,090
I'd look it up in
an English-Spanish dictionary.

14
00:00:49,090 --> 00:00:52,210
Well our computers have
a built-in translation book.

15
00:00:52,210 --> 00:00:56,790
In this lesson, we'll dive deeper into how
our computer translates the information we

16
00:00:56,790 --> 00:00:59,290
give it into instructions
that it understands.

17
00:00:59,290 --> 00:01:03,140
Right now, you're probably using a web
browser, music player, text setter or

18
00:01:03,140 --> 00:01:05,010
something else in your computer.

19
00:01:05,010 --> 00:01:07,790
We interact with these
applications on a daily basis.

20
00:01:07,790 --> 00:01:09,950
They are referred to as Programs.

21
00:01:09,950 --> 00:01:13,890
Programs are basic instructions
that tell the computer what to do.

22
00:01:13,890 --> 00:01:17,020
We technically store programs on
durable media like hard drives.

23
00:01:17,020 --> 00:01:20,320
You can think of programs
like cooking recipes.

24
00:01:20,320 --> 00:01:23,320
We get these recipes all
stored together in a cook book

25
00:01:23,320 --> 00:01:25,475
just like apps stored in a hard drive.

26
00:01:25,475 --> 00:01:27,902
Now we want to make a ton of food.

27
00:01:27,902 --> 00:01:31,950
So we hire a chef to follow our
recipes and whip up something good.

28
00:01:31,950 --> 00:01:35,690
The faster our chef works,
the more food she'll prepare.

29
00:01:35,690 --> 00:01:41,780
The chef is our CPU, she processes the
recipes we send her and makes the food.

30
00:01:41,780 --> 00:01:46,720
Our chef works super fast, so fast that
she can cook faster than she can read.

31
00:01:46,720 --> 00:01:50,000
So, we take copy of the recipes and
put them into RAM.

32
00:01:50,000 --> 00:01:53,460
Remember that RAM is our
computer's short-term memory.

33
00:01:53,460 --> 00:01:56,720
It stores information in
a location our CPU can access

34
00:01:56,720 --> 00:01:59,340
faster than it could with our hard drive.

35
00:01:59,340 --> 00:02:02,170
Now we can give our chef one or
two recipes at a time,

36
00:02:02,170 --> 00:02:04,870
instead of reciting
the entire cookbook to her.

37
00:02:04,870 --> 00:02:09,660
Okay, now let's say I want to make
a peanut butter and jelly sandwich.

38
00:02:09,660 --> 00:02:12,790
I see a pretty good recipe, and
send it to our chef to make.

39
00:02:13,940 --> 00:02:17,370
Remember that our chef needs
these instructions quickly, so

40
00:02:17,370 --> 00:02:22,360
I don't send her the entire recipe,
I send her one line at a time.

41
00:02:22,360 --> 00:02:25,055
1, Get two slices of bread.

42
00:02:25,055 --> 00:02:28,565
2, Put peanut butter on one slide.

43
00:02:28,565 --> 00:02:31,535
3, Put jelly on another slice.

44
00:02:31,535 --> 00:02:34,310
4, Combine the two slices of bread.

45
00:02:34,310 --> 00:02:37,380
Now, let me throw one more thing at you.

46
00:02:37,380 --> 00:02:41,210
Our chef can only communicate
with us in ones and zeroes.

47
00:02:41,210 --> 00:02:45,090
So instead of sending something readable,
like the recipe for a peanut butter and

48
00:02:45,090 --> 00:02:48,100
jelly sandwich,
we have to send her something like this.

49
00:02:48,100 --> 00:02:51,530
In reality,
this process is a little more complicated.

50
00:02:51,530 --> 00:02:54,960
Our CPU is constantly taking
instructions and executing them.

51
00:02:54,960 --> 00:02:58,120
These instructions
are written in binary but

52
00:02:58,120 --> 00:03:00,210
how do they travel around the computer?

53
00:03:00,210 --> 00:03:04,800
In our computer, we have something
called the External Data Bus or EDB.

54
00:03:05,820 --> 00:03:08,180
It's nothing like a bus at all.

55
00:03:08,180 --> 00:03:11,790
It's a row of wires that interconnect
the parts of our computer,

56
00:03:11,790 --> 00:03:14,100
kind of the veins in our body.

57
00:03:14,100 --> 00:03:17,130
When you send a voltage
to one of the wires,

58
00:03:17,130 --> 00:03:21,100
we say the state of the wire is on,
or represented by a 1.

59
00:03:21,100 --> 00:03:27,000
If there's no voltage, then we say that
the state is off, represented by a 0.

60
00:03:27,000 --> 00:03:29,720
This is how we send around our ones and
zeroes.

61
00:03:29,720 --> 00:03:31,020
Sound familiar?

62
00:03:31,020 --> 00:03:35,730
The last lesson we talked about how
transistors help us to send voltages.

63
00:03:35,730 --> 00:03:38,770
Now we know how our bits
physically travel around computer.

64
00:03:38,770 --> 00:03:44,010
The EDB comes in different sizes,
8 bit, 16 bit, 32, even 64.

65
00:03:44,010 --> 00:03:47,850
Can you imagine if you had 64 wires going?

66
00:03:47,850 --> 00:03:49,890
You can move around a lot more data.

67
00:03:49,890 --> 00:03:54,530
Right now, were just going to stick with
using an EDB with 8 bits in our examples.

68
00:03:54,530 --> 00:03:56,780
Sending 1 byte at a time.

69
00:03:56,780 --> 00:04:01,400
Okay so now, our CPU is receiving
a byte and it needs to get to work.

70
00:04:02,560 --> 00:04:05,810
Inside the CPU there
are components known as Registers.

71
00:04:07,030 --> 00:04:10,600
They let us store the data
that our CPU works with.

72
00:04:10,600 --> 00:04:11,820
If for example,

73
00:04:11,820 --> 00:04:16,710
our CPU wanted to add two numbers, one
number would be stored in a register a.

74
00:04:17,760 --> 00:04:19,840
Another number would be
stored in register b.

75
00:04:19,840 --> 00:04:24,560
The result of those two numbers
would be stored in register c.

76
00:04:24,560 --> 00:04:28,360
Imagine the register is one
of our chef's work tables.

77
00:04:28,360 --> 00:04:31,320
Since she has a place to work,
she can start to cook.

78
00:04:31,320 --> 00:04:36,000
To do so she uses a translation book
to translate her binary into tasks

79
00:04:36,000 --> 00:04:36,920
that she can perform.

80
00:04:38,020 --> 00:04:40,300
Let's jump back for a second.

81
00:04:40,300 --> 00:04:44,930
Remember that our programs are copied
into RAM for the CPU to read.

82
00:04:44,930 --> 00:04:47,750
RAM is memory that is randomly accessed,

83
00:04:47,750 --> 00:04:52,780
allowing our CPU to read from any part
of RAM as quickly as any other part.

84
00:04:52,780 --> 00:04:55,230
We don't actually send data
from RAM over the EDB.

85
00:04:55,230 --> 00:04:58,380
There would be way to much stuff.

86
00:04:58,380 --> 00:05:02,050
RAM can hold millions,
even billions, of rows of data.

87
00:05:02,050 --> 00:05:07,270
Despite our sandwich example,
most of our recipes aren't simple at all.

88
00:05:07,270 --> 00:05:09,280
There can be thousands of lines long.

89
00:05:09,280 --> 00:05:13,550
We want to process them and we don't
actually go in any particular order.

90
00:05:13,550 --> 00:05:17,760
Since we can only send one line of
data through the EDB at the time,

91
00:05:17,760 --> 00:05:23,060
we need the help of another component,
the Memory Controller Chip or MCC.

92
00:05:23,060 --> 00:05:29,070
The MCC is a bridge between the CPU and
the RAM.

93
00:05:29,070 --> 00:05:32,990
You can think of it, a nerve in your
brain connecting to your memories.

94
00:05:32,990 --> 00:05:36,960
The CP talks to the MCC, and says,
hey, I need the instructions for

95
00:05:36,960 --> 00:05:39,150
step number three of this recipe.

96
00:05:39,150 --> 00:05:43,690
The MCC finds the instructions for step
number three in RAM, grabs the data, and

97
00:05:43,690 --> 00:05:45,670
sends it through the EDB.

98
00:05:45,670 --> 00:05:46,760
There's another bus.

99
00:05:46,760 --> 00:05:51,330
There's nothing like a bus involved in
the process called the Address bus.

100
00:05:51,330 --> 00:05:53,350
It connects the CPU to the MCC,

101
00:05:53,350 --> 00:05:57,650
and sends over the location of the data,
but not the data itself.

102
00:05:57,650 --> 00:06:00,990
Then the MCC takes the address and
looks for the data.

103
00:06:00,990 --> 00:06:03,700
And then data is then sent over the EDB.

104
00:06:05,020 --> 00:06:09,460
Believe it or not, RAM isn't the fastest
way we can get more data to our CPU for

105
00:06:09,460 --> 00:06:09,990
processing.

106
00:06:11,030 --> 00:06:13,555
The CPU also uses
something known as Cache.

107
00:06:14,915 --> 00:06:19,360
Cache is smaller than RAM, but it let's
us store data that we use often, and

108
00:06:19,360 --> 00:06:21,190
let's us quickly reference it.

109
00:06:21,190 --> 00:06:24,370
Think of RAM like
a refrigerator full of food.

110
00:06:24,370 --> 00:06:27,740
It's easy to get into, but
it takes time to get something out.

111
00:06:27,740 --> 00:06:32,550
On the flip side of that, Cache is
like the stuff we have in our pockets.

112
00:06:32,550 --> 00:06:36,110
It's used to store recently or
frequently accessed data.

113
00:06:36,110 --> 00:06:41,810
There are three different cache
levels in a CPU, L1, L2, and L3.

114
00:06:41,810 --> 00:06:44,850
L1 is the smallest and fastest cache.

115
00:06:44,850 --> 00:06:46,700
If you're interested in
learning more about this,

116
00:06:46,700 --> 00:06:50,380
you can check out the supplemental reading
I've included right after this video.

117
00:06:50,380 --> 00:06:54,538
So now we understand how our
RAM interacts with our CPU.

118
00:06:54,538 --> 00:07:00,050
But how does our CPU know when the set of
instruction ends, and a new one begins.

119
00:07:00,050 --> 00:07:04,660
Our CPU has an internal clock that
keeps its operational in sync.

120
00:07:04,660 --> 00:07:08,090
It connects to a special
wire called Clock wire.

121
00:07:08,090 --> 00:07:13,300
When you send or receive data, it sends a
voltage to that clock wire to let the CPU

122
00:07:13,300 --> 00:07:15,820
know it can start doing calculations.

123
00:07:15,820 --> 00:07:19,450
Think of our clock wires
as the ticking of a clock.

124
00:07:19,450 --> 00:07:23,100
For every tick,
the CPU does one cycle of operations.

125
00:07:23,100 --> 00:07:27,710
When you send a voltage to the clock wire,
it's referred to as a clock cycle.

126
00:07:27,710 --> 00:07:31,080
If you have lots of data you
need to process in a command.

127
00:07:31,080 --> 00:07:33,070
You need to run lots of clock cycles.

128
00:07:34,110 --> 00:07:39,708
Have you ever seen a CPU in the store and
has something labeled 3.4ghz,

129
00:07:39,708 --> 00:07:43,423
this number refers to
the Clock speed of the CPU.

130
00:07:43,423 --> 00:07:46,998
Which is a maximum number of clock cycles
that it can handle in a set in a certain

131
00:07:46,998 --> 00:07:47,676
time period.

132
00:07:47,676 --> 00:07:53,960
3.40 gigahertz is 3.4
billion cycles per second.

133
00:07:53,960 --> 00:07:55,690
That's super fast.

134
00:07:55,690 --> 00:07:59,610
But just because it can run at this speed,
doesn't mean it does.

135
00:07:59,610 --> 00:08:02,160
It just means that it
can't exceed this number.

136
00:08:02,160 --> 00:08:05,480
Still, that number doesn't
stop some people from trying.

137
00:08:05,480 --> 00:08:08,350
There's a way you can exceed
the number of clock cycles

138
00:08:08,350 --> 00:08:11,410
on your CPU on almost any device.

139
00:08:11,410 --> 00:08:13,700
It's referred to as Overclocking and

140
00:08:13,700 --> 00:08:18,730
it increases the rate of your CPU clock
cycles in order to perform more tasks.

141
00:08:18,730 --> 00:08:22,115
This is commonly used to increase
the performance in low-end CPUs.

142
00:08:22,115 --> 00:08:25,470
Let's say you're a gamer and
you want to have better graphics and

143
00:08:25,470 --> 00:08:27,120
less lag while playing.

144
00:08:27,120 --> 00:08:31,260
You might want to overclock your
CPU when you play the game, but

145
00:08:31,260 --> 00:08:35,540
there are cons to doing this,
like potentially overheating your CPU.

146
00:08:35,540 --> 00:08:38,930
You can read more about overclocking
in the next supplementary reading.